{-
0
isVoid : (RelationNot p Negative Positive xs)
      -> (Relation    p Negative Positive xs)
      -> Void
isVoid (Here prf) (Cons head tail)
  = All.prf prf head
isVoid (There _ tFN) (Cons _ tH)
  = isVoid tFN tH


public export
SAME : (p : (x,y : type) -> Decidable)
    -> (xs : List type)
    -> Decidable
SAME p xs
  = D (RelationNot p Negative Positive xs)
      (Relation    p Negative Positive xs)
      isVoid

export
same : (f  : (x,y : type) -> Positive.Dec (p x y))
    -> (xs : List type)
          -> Positive.Dec (SAME p xs)
same f []
  = Left Empty
same f (x :: xs) = ?same_rhs_1

export
sameByEQ : Positive.DecEq a => (xs : List a) -> Positive.Dec (SAME DECEQ xs)
sameByEQ = same decEq
-}
{-
RELATION : (p : (x,y : type) -> Decidable)
     -> (xs : List type)
     -> Decidable
RELATION p xs
  = D (Relation    p Positive Negative xs)
      (RelationNot p Positive Negative xs)
      (Relation.prf)

-}
{-

public export
RELATION : Positive.DecEq type
    => (xs : List type)
          -> Decidable
RELATION xsb
  = ALL (\x => ALL (DECEQIN x) xs) xs

relationX : Positive.DecEq type
      => (x : type)
      -> (xs : List type)
            -> Positive.Dec (ALL (DECEQIN x) xs)

export
relation : Positive.DecEq type
     => (xs : List type)
           -> Positive.Dec (RELATION xs)
relation xs
  = All.all (\x => All.all (decEqN x) xs) xs
-}
